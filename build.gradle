plugins {
    id 'org.springframework.boot' version '3.2.3'
    id 'io.spring.dependency-management' version '1.1.5'
    id 'java'
    id 'org.asciidoctor.jvm.convert' version "3.3.2"
    id 'org.sonarqube' version '3.5.0.2730' // sonarqube gradle plugin 의존성
    id 'jacoco' // jacoco gradle plugin 의존성
}

group = 'com.kustacks'
version = '2.6.4'
sourceCompatibility = '17'

configurations {
    asciidoctorExtensions
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/snapshot' }
}

sonarqube {
    properties {
        property "sonar.projectKey", "KU-Stacks_ku-ring-backend-web"
        property "sonar.organization", "kuring1234"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

ext {
    set('springAiVersion', "1.0.0-M1")
}

dependencies {
    // Web
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.retry:spring-retry'
    implementation 'org.springframework:spring-aspects'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

    // Mail
    implementation 'org.springframework.boot:spring-boot-starter-mail'

    // AI
    implementation "org.springframework.ai:spring-ai-openai-spring-boot-starter:${springAiVersion}"
    implementation "org.springframework.ai:spring-ai-chroma-store-spring-boot-starter:${springAiVersion}"

    // DB
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'
    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0'

    // QueryDsl
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // password encoder
    implementation 'org.springframework.security:spring-security-crypto:5.7.5'

    // jwt
    implementation 'io.jsonwebtoken:jjwt:0.9.1'

    // monitoring
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    // flyway
    implementation 'org.flywaydb:flyway-mysql'

    // DevTool
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // MockServer
    implementation 'org.mock-server:mockserver-netty:5.11.2'
    implementation 'org.mock-server:mockserver-client-java:5.11.2'

    // Jsoup
    implementation 'org.jsoup:jsoup:1.14.3'

    // Firebase
    implementation 'com.google.firebase:firebase-admin:9.3.0'

    // RestDocs
    asciidoctorExtensions 'org.springframework.restdocs:spring-restdocs-asciidoctor'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    // Swagger
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'

    // Test
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.rest-assured:rest-assured:5.3.2'

    // ArchUnit
    testImplementation 'com.tngtech.archunit:archunit-junit5:1.0.1'

    // Test Container
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'
    testImplementation 'org.testcontainers:testcontainers:1.19.8'
    testImplementation 'org.testcontainers:junit-jupiter:1.19.8'
    testImplementation 'org.testcontainers:mariadb:1.19.8'
    testImplementation 'org.testcontainers:chromadb:1.19.8'
    testImplementation 'io.projectreactor:reactor-test'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.ai:spring-ai-bom:${springAiVersion}"
    }
}

// Swagger force conflict resolution
configurations.all {
    resolutionStrategy {
        eachDependency { details ->
            if (details.requested.group == 'io.swagger.core.v3') {
                details.useVersion("2.2.19")
                details.because('Swagger ui incoptable dependency io.swagger.core.v3:swagger-annotations')
            }
        }
    }
}

//test.onlyIf { System.getenv('DEPLOY_ENV') == 'dev' }

test {
    jacoco {
        destinationFile = file("$buildDir/jacoco/jacoco.exec")
    }

    useJUnitPlatform()
    testLogging {
        // test jvm의 standard out and standard error을 console에 출력한다.
        showStandardStreams = true
        showCauses = true
        showExceptions = true
        showStackTraces = true
        exceptionFormat = 'full'
    }

    finalizedBy 'jacocoTestReport'
}

jar {
    enabled = false
    manifest {
        attributes 'Main-Class': 'com.kustacks.kuring.KuringApplication'
    }
}

// -- QueryDsl 설정 -------------------------------------------------------
//Querydsl 추가
def querydslSrcDir = 'src/main/generated'
clean {
    delete file(querydslSrcDir)
}
tasks.withType(JavaCompile) {
    options.generatedSourceOutputDirectory = file(querydslSrcDir)
}

// 자동 생성된 Q클래스 gradle clean으로 제거
clean {
    delete file('src/main/generated')
}

// -- Jacoco 설정 -------------------------------------------------------
jacoco {
    // jacoco version
    toolVersion = '0.8.8'
}

jacocoTestReport {
    dependsOn test
    reports {
        html.enabled true // 개발자용 html
        xml.enabled true // 소나큐브용, 경로를 추가하지 않아도 sonarcloud가 default 경로를 인식
        csv.enabled false
    }

    // QueryDSL은 분석에서 제외시켜야 함
    def Qdomains = []
    for (qPattern in '**/QA'..'**/QZ') {
        Qdomains.add(qPattern + '*')
    }

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: [
                            '**/*Request.*',
                            '**/*Response.*',
                            '**/dto/**',
                            '**/*Interceptor.*',
                            '**/*Exception.*',
                            '**/*Storage.*',
                            '**/KuringApplication.*',
                            '**/*Token.*',
                            '**/*Converter.*',
                            '**/*AdminController.*',
                            '**/*Dialect.*'
                    ] + Qdomains)
                })
        )
    }

    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    def Qdomains = []
    for (qPattern in '*.QA'..'*.QZ') {
        Qdomains.add(qPattern + '*')
    }

    violationRules {
        rule {
            enabled = true // 활성화
            limit {
                element = 'CLASS'
                minimum = 0.0
            }

            excludes = [
                    '**.*Request.*',
                    '**.*Response.*',
                    '**.*Dto.*',
                    '**.*Interceptor.*',
                    '**.*Exception.*',
                    '**.*Storage.*',
                    '**.KuringApplication.*',
                    '**.*Token.*',
                    '**.*Converter.*',
                    '**.*AdminController.*',
                    '**.*Dialect.*'
            ] + Qdomains
        }
    }
}

task testCoverage(type: Test) {
    group 'verification'
    description 'Runs the unit tests with coverage'

    dependsOn(':test',
            ':jacocoTestReport',
            ':jacocoTestCoverageVerification')

    tasks['jacocoTestReport'].mustRunAfter(tasks['test'])
    tasks['jacocoTestCoverageVerification'].mustRunAfter(tasks['jacocoTestReport'])
}
